; Program name
.program linkcable_sm

.define WAITING_TIME (200 / 5)
.define WAITING_TIME_DIVIDER 2

.wrap_target
    wait 0 gpio 0 [0]       ; wait for falling edge
    pull noblock            ; pull value for transmission from pico
    mov x, y
    jmp !x single_byte_transfers_set
    set  x, 30
after_transfer_set:
    out pins, 1             ; out the MSB bit
    wait 1 gpio 0 [WAITING_TIME/WAITING_TIME_DIVIDER]       ; wait for rising edge
    nop [WAITING_TIME/WAITING_TIME_DIVIDER]
bitloop:
        in pins, 1          ; input bit
        wait 0 gpio 0 [WAITING_TIME/WAITING_TIME_DIVIDER]   ; wait for falling edge
        nop [WAITING_TIME/WAITING_TIME_DIVIDER]
        out pins, 1         ; output rest of the bits one by one
        wait 1 gpio 0 [(WAITING_TIME/WAITING_TIME_DIVIDER)-1]   ; wait for rising edge
        nop [WAITING_TIME/WAITING_TIME_DIVIDER]
    jmp x-- bitloop         ; loop through the rest of the bits
    in pins, 1              ; input rest of the bits one by one
    push noblock            ; push the received value to pico
    irq 0
.wrap

single_byte_transfers_set:
    set  x, 6
    out null, 24            ; shift left by 24
    jmp after_transfer_set


% c-sdk {
#define PIN_SCK             0
#define PIN_SIN             1
#define PIN_SOUT            2

static inline void linkcable_select_mode(PIO pio, uint sm, uint is_32) {
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, is_32));
}

static inline void linkcable_sm_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = linkcable_sm_program_get_default_config(offset);

    pio_sm_set_consecutive_pindirs(pio, sm, PIN_SCK, 1, false);

    sm_config_set_in_pins(&c, PIN_SIN);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_SIN, 1, false);
    sm_config_set_in_shift(&c, false, false, 32);

    sm_config_set_out_pins(&c, PIN_SOUT, 1);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_SOUT, 1, true);
    sm_config_set_out_shift(&c, false, false, 32);

    sm_config_set_clkdiv(&c, 5);                // Set clock division

    pio_gpio_init(pio, PIN_SCK);
    pio_gpio_init(pio, PIN_SIN);
    pio_gpio_init(pio, PIN_SOUT);

    pio_sm_init(pio, sm, offset, &c);
    linkcable_select_mode(pio, sm, 0);

//    pio_sm_set_enabled(pio, sm, true);          // Set the state machine running (commented out, I'll start this in the C)
}
%}
